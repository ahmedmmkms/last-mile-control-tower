// Simple TCP connection test\nconst net = require('net');\n\nfunction testTCPPort(host, port) {\n  return new Promise((resolve, reject) => {\n    const client = new net.Socket();\n    let connected = false;\n    \n    client.setTimeout(5000); // 5 second timeout\n    \n    client.connect(port, host, () => {\n      connected = true;\n      client.destroy();\n      resolve(true);\n    });\n    \n    client.on('timeout', () => {\n      if (!connected) {\n        client.destroy();\n        reject(new Error('Connection timeout'));\n      }\n    });\n    \n    client.on('error', (err) => {\n      if (!connected) {\n        client.destroy();\n        reject(err);\n      }\n    });\n  });\n}\n\nasync function testConnection() {\n  const host = 'db.vnpcvmdhemtztkxinzqw.supabase.co';\n  const port = 5432;\n  \n  console.log(`Testing TCP connection to ${host}:${port}`);\n  \n  try {\n    await testTCPPort(host, port);\n    console.log('✅ TCP connection successful!');\n  } catch (error) {\n    console.error('❌ TCP connection failed:', error.message);\n    \n    // Try with IPv4 address\n    const ipv4 = '172.64.149.246';\n    console.log(`\\nTesting TCP connection to IPv4 ${ipv4}:${port}`);\n    \n    try {\n      await testTCPPort(ipv4, port);\n      console.log('✅ TCP connection successful with IPv4!');\n    } catch (ipv4Error) {\n      console.error('❌ TCP connection failed with IPv4:', ipv4Error.message);\n    }\n  }\n}\n\ntestConnection();